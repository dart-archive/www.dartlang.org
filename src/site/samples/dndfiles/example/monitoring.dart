import "dart:async" as AB;import "dart:html" as i;import "dart:math" as k;class l{static const  m="Chrome";static const  n="Firefox";static const  o="Internet Explorer";static const  q="Safari";final  j;final  minimumVersion;const l(this.j,[this.minimumVersion]);}class s{const s();}class t{final  name;const t(this.name);}class u{const u();}class v{var BB;var CB;var DB;v(){CB=i.query('#progress-bar');BB=i.document.query('#files');BB.onChange.listen((g)=>EB());var h=i.query('#cancel-read');h.onClick.listen((g)=>FB());} GB( g){g=k.min(100,k.max(0,g));CB.style.width='${g}%';CB.text='${g}%';if(g==0||g==100){new AB.Timer(const Duration(milliseconds:2000),()=>CB.classes.remove('loading'));}} EB(){GB(0);CB.classes.remove('loading');var h=BB.files[0];DB=new i.FileReader();DB.onError.listen((g)=>HB());DB.onProgress.listen(IB);DB.onAbort.listen((g)=>i.window.alert('File read cancelled.'));DB.onLoadStart.listen((g)=>CB.classes.add('loading'));DB.onLoad.listen((g)=>GB(100));DB.readAsBinaryString(h);} FB(){if(DB!=null){DB.abort();}} IB( g){if(g.lengthComputable){var h=(100*g.loaded/g.total).round().toInt();GB(h);}} HB(){switch (DB.error.code){case i.FileError.NOT_FOUND_ERR:i.window.alert('File not found!');break;case i.FileError.NOT_READABLE_ERR:i.window.alert('File is not readable.');break;case i.FileError.ABORT_ERR:break;default:i.window.alert('An error occurred reading this file.');break;}}} main(){new v();}