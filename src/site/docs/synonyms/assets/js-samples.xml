<?xml version="1.0"?>
<synonyms>
<theme id="theme-getting-started">
  <title>Getting started</title>
  <synonym id="syn-code-embedding">
    <title>Code embedding</title>
    <code language="javascript"><![CDATA[
<script src='program.js'></script>
]]></code>
  </synonym>
  <synonym id="syn-entry-point">
    <title>Entry point</title>
    <code language="javascript"><![CDATA[
// Not required.
function main() {
  // To be used as the entry point, but it must be
  // called manually.
}

main();

// Sometimes the entry point is written as an
// anonymous function
(function(){
  // Code to be run automatically on execution
})();
]]></code>
  </synonym>
  <synonym id="syn-detect-language-unavailability">
    <title>Detect language unavailability</title>
    <code language="javascript"><![CDATA[
<noscript>
  Your browser doesn’t support JavaScript.
</noscript>
]]></code>
  </synonym>
  <synonym id="syn-printing-to-the-console">
    <title>Printing to the console</title>
    <code language="javascript"><![CDATA[
console.log('Level completed.');
]]></code>
  </synonym>
  <synonym id="syn-modal-alerts">
    <title>Modal alerts</title>
    <code language="javascript"><![CDATA[
alert('Clicked on the button.');
]]></code>
  </synonym>
</theme>
<theme id="theme-code-modularity">
  <title>Code modularity</title>
  <synonym id="syn-define-a-library">
    <title>Define a library</title>
    <code language="javascript"><![CDATA[
// No native implementation.
// Consider require.js and AMD
]]></code>
  </synonym>
  <synonym id="syn-use-a-library">
    <title>Use a library</title>
    <code language="javascript"><![CDATA[
// no native implementation
// consider require.js and AMD
]]></code>
  </synonym>
</theme>
<theme id="theme-variables">
  <title>Variables</title>
  <synonym id="syn-create--assign-value">
    <title>Create + assign value</title>
    <code language="javascript"><![CDATA[
var myName = 'Aaron';
]]></code>
  </synonym>
  <synonym id="syn-default-value">
    <title>Default value</title>
    <code language="javascript"><![CDATA[
var myName;
// == undefined
]]></code>
  </synonym>
  <synonym id="syn-hoisting">
    <title>Hoisting</title>
    <code language="javascript"><![CDATA[
// JavaScript "hoists" variables to the top of
// their scope.  So the following function:
function printName() {
  console.log('Hello, ' + name);
  var name = 'Bob';
}

// is equivalent to this function:
function printName() {
  var name;
  console.log('Hello, ' + name);
  name = 'Bob';
}

printName();
// Hello, undefined
]]></code>
  </synonym>
  <synonym id="syn-final-variables">
    <title>Final variables</title>
    <code language="javascript"><![CDATA[
// no support
]]></code>
  </synonym>
</theme>
<theme id="theme-collections">
  <title>Collections</title>
  <synonym id="syn-arrays--lists">
    <title>Arrays / Lists</title>
    <code language="javascript"><![CDATA[
var a = new Array();
var a = [];
var a = ['apple', 'banana', 'cherry'];

a.push('orange');

a.length == 4;
]]></code>
  </synonym>
  <synonym id="syn-custom-sort">
    <title>Custom sort</title>
    <code language="javascript"><![CDATA[
var numbers = [42, 2.1, 5, 0.1, 391];
numbers.sort(function(a, b) {
  return a - b;
});
// == [0.1, 2.1, 5, 42, 391]
]]></code>
  </synonym>
  <synonym id="syn-key-value-pairs">
    <title>Key-value pairs</title>
    <code language="javascript"><![CDATA[
// An empty key-value pair can be declared
// in two different ways in JavaScript
var periodic = new Object();
var periodic = {};
]]></code>
  </synonym>
  <synonym id="syn-appropriate-keys">
    <title>Appropriate keys</title>
    <code language="javascript"><![CDATA[
var periodic = {
  gold: 'AU',
  silver: 'AG'
};

var periodic = {
  'gold': 'AU',
  'silver': 'AG'
};
]]></code>
  </synonym>
  <synonym id="syn-accessing-values">
    <title>Accessing values</title>
    <code language="javascript"><![CDATA[
periodic.gold // == 'AU'
periodic['gold'] // == 'AU'

periodic.gold = 'Glitter';
periodic['gold'] = 'Glitter';
]]></code>
  </synonym>
  <synonym id="syn-sets-collections-of-unique-items">
    <title>Sets (collections of unique items)</title>
    <code language="javascript"><![CDATA[
// no native JavaScript equivalent
]]></code>
  </synonym>
  <synonym id="syn-queues-fifo">
    <title>Queues (FIFO)</title>
    <code language="javascript"><![CDATA[
// No dedicated queue, use an array.
var queue = [];
queue.push('event:32342');
queue.push('event:49309');

console.log(queue.length); // 2

var eventId = queue.shift();

console.log(eventId === 'event:32342');
console.log(queue.length); // 1
]]></code>
  </synonym>
</theme>
<theme id="theme-strings">
  <title>Strings</title>
  <synonym id="syn-raw-strings">
    <title>Raw strings</title>
    <code language="javascript"><![CDATA[
// JavaScript does not have 'raw' strings.
// All escaping must be done manually.
var escapedString = 'A tab looks like \\t';
]]></code>
  </synonym>
  <synonym id="syn-interpolation">
    <title>Interpolation</title>
    <code language="javascript"><![CDATA[
var name = 'Aaron';
var greeting = 'My name is ' + name;

var greetingPolish = 'My Polish name would be ' + name + 'ski';

element.style.top = (top + 20) + 'px';

]]></code>
  </synonym>
  <synonym id="syn-concatenation">
    <title>Concatenation</title>
    <code language="javascript"><![CDATA[
var longMessage = 'This is a very long line. ' +
                  'It is concatenated into one string.';
                  
var name = 'Aaron';
var greeting = 'My name is ' + name;  
]]></code>
  </synonym>
  <synonym id="syn-substring">
    <title>Substring</title>
    <code language="javascript"><![CDATA[
'doghouses'.substring(3, 8) // == 'house'
'doghouses'.substr(3, 5) // == 'house'
]]></code>
  </synonym>
  <synonym id="syn-replace-all-occurences">
    <title>Replace all occurences</title>
    <code language="javascript"><![CDATA[
'doghouses'.replace(/s/g, 'z') // == 'doghouzez'
]]></code>
  </synonym>
  <synonym id="syn-replace-one-occurence">
    <title>Replace one occurence</title>
    <code language="javascript"><![CDATA[
'racecar'.replace(/r/, 'sp') // == 'spacecar'
]]></code>
  </synonym>
  <synonym id="syn-multi-line-strings">
    <title>Multi-line strings</title>
    <code language="javascript"><![CDATA[
var string = 
    'This is a string that spans\n' +
    'many lines.\n';
]]></code>
  </synonym>
  <synonym id="syn-split-into-an-array">
    <title>Split into an array</title>
    <code language="javascript"><![CDATA[
var animals = 'dogs, cats, gophers, zebras';
var individualAnimals = animals.split(', ');
// == ['dogs', 'cats', 'gophers', 'zebras'];
]]></code>
  </synonym>
  <synonym id="syn-test-whether-a-string-starts-with-a-substring">
    <title>Test whether a string starts with a substring</title>
    <code language="javascript"><![CDATA[
// JavaScript has no built-in startsWith function
String.prototype.startsWith = function(beginning) {
  var head = this.substr(0, beginning.length);
  return head == beginning;
}

'racecar'.startsWith('race') // == true
'racecar'.startsWith('pace') // == false
]]></code>
  </synonym>
</theme>
<theme id="theme-booleans">
  <title>Booleans</title>
  <synonym id="syn-if-statements">
    <title>If statements</title>
    <code language="javascript"><![CDATA[
var bugNumbers = [3234,4542,944,124];
if (bugNumbers.length > 0) {
  console.log('Not ready for release');
}
]]></code>
  </synonym>
  <synonym id="syn-ternary-statements">
    <title>Ternary statements</title>
    <code language="javascript"><![CDATA[
var bugNumbers = [3234,4542,944,124];
var status = bugNumbers.length > 0 ? 'RED' : 'GREEN';

console.log('The build is ' + status);
]]></code>
  </synonym>
  <synonym id="syn-checking-for-empty-string">
    <title>Checking for empty string</title>
    <code language="javascript"><![CDATA[
var emptyString = '';

if (!emptyString) {
  console.log('empty strings are treated as false');
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-zero">
    <title>Checking for zero</title>
    <code language="javascript"><![CDATA[
var zero = 0;

if (!zero) {
  console.log('0 is treated as false');
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-null">
    <title>Checking for null</title>
    <code language="javascript"><![CDATA[
var myNull = null;

if (!myNull) {
  console.log('null is treated as false');
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-nan">
    <title>Checking for NaN</title>
    <code language="javascript"><![CDATA[
var myNaN = NaN;

if (!myNaN) {
  console.log('NaN is treated as false');
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-undefined">
    <title>Checking for undefined</title>
    <code language="javascript"><![CDATA[
if (typeof isUndefined === 'undefined') {
  console.log('undefined');
}
]]></code>
  </synonym>
  <synonym id="syn-value-and-identity-equality">
    <title>Value and identity equality</title>
    <code language="javascript"><![CDATA[
var letterA = 'A';
var charA = String.fromCharCode(65);

// JavaScript converts both values to the same type
// before checking their value with 'double equals'.
letterA == charA // == true

// Similarly...
var number5 = 5;
var char5 = '5';

// This comparison triggers type conversion
number5 == char5 // == true

// 'triple equals' checks type and value
letterA === charA // == true
number5 === char5 // == false
]]></code>
  </synonym>
</theme>
<theme id="theme-functions">
  <title>Functions</title>
  <synonym id="syn-function-definition">
    <title>Function definition</title>
    <code language="javascript"><![CDATA[
function fn() {
  …
  return true;
}
]]></code>
  </synonym>
  <synonym id="syn-return-value">
    <title>Return value</title>
    <code language="javascript"><![CDATA[
function fn() { return 'Hello'; }
fn(); // == 'Hello'

(function(){})() // == returns undefined
]]></code>
  </synonym>
  <synonym id="syn-assign-a-function-to-a-variable">
    <title>Assign a function to a variable</title>
    <code language="javascript"><![CDATA[
var loudify = function(msg) {
  return msg.toUpperCase();
}

loudify('not gonna take it anymore');
// NOT GONNA TAKE IT ANYMORE
]]></code>
  </synonym>
  <synonym id="syn-optional-parameters">
    <title>Optional parameters</title>
    <code language="javascript"><![CDATA[
function fn(a, b, c) { return c; };

fn(1) // == undefined
fn(1, 2, 3) // == 3
]]></code>
  </synonym>
  <synonym id="syn-default-parameters">
    <title>Default parameters</title>
    <code language="javascript"><![CDATA[
function send(msg, rate) {
  rate = rate || 'First Class';
  return msg + " was sent via " + rate;
}

send('hello') // == 'hello was sent via First Class'
send("I'm cheap", '4th class') // == "I'm cheap was sent via 4th class
]]></code>
  </synonym>
  <synonym id="syn-named-parameters">
    <title>Named parameters</title>
    <code language="javascript"><![CDATA[
// JavaScript does not have native support for named parameters
]]></code>
  </synonym>
  <synonym id="syn-variable-number-of-arguments">
    <title>Variable number of arguments</title>
    <code language="javascript"><![CDATA[
function superHeros() {
  for (var i = 0; i < arguments.length; i++) {
    console.log("There's no stopping " + arguments[i]);
  }
}

superHeros('UberMan', 'Exceptional Woman', 'The Hunk');
]]></code>
  </synonym>
</theme>
<theme id="theme-iterators">
  <title>Iterators</title>
  <synonym id="syn-for-loops-for-lists">
    <title>For loops for lists</title>
    <code language="javascript"><![CDATA[
var colors = ['red', 'orange', 'green'];

for (var i = 0; i < colors.length; i++) {
  console.log(colors[i]);
}
]]></code>
  </synonym>
  <synonym id="syn-for-in-loops">
    <title>For-in loops</title>
    <code language="javascript"><![CDATA[
var fruits = ['orange', 'apple', 'banana'];

// 'in' notation in JavaScript iterates through
// the properties, not values, of an object. 
// Thus it returns the indices of the array
// and any items add to the Array prototype.

for (var i in fruits) {
  console.log(fruits[i]);
}
]]></code>
  </synonym>
  <synonym id="syn-for-loops-for-objectsmaps">
    <title>For loops for objects/maps</title>
    <code language="javascript"><![CDATA[
var data = { … };

for (var key in data) {
  console.log('key', key);
  console.log('value', data[key]);
}
]]></code>
  </synonym>
  <synonym id="syn-closures-and-counters-in-loops">
    <title>Closures and counters in loops</title>
    <code language="javascript"><![CDATA[
var callbacks = [];

// A closure must be used to preserve the return for
// each function at each step of the loop.  Otherwise
// every entry in callbacks will return 2;
for (var i = 0; i < 2; i++) {
  (function(_i) {
    callbacks.push(function() {
      return _i;
    });
  })(i);
}

// Without the internal closure, the result is 2
callbacks[0]() // == 0

// ECMAScript 6 can support this with the use of blocks
let callbacks = [];
for (let i = 0; i < 10; i++) {
  let j = i;
  callbacks.push(function() { print(j) });
}
]]></code>
  </synonym>
</theme>
<theme id="theme-classes">
  <title>Classes</title>
  <synonym id="syn-define">
    <title>Define</title>
    <code language="javascript"><![CDATA[
function Person() {
  this.name = null;
};

Person.prototype.greet = function() {
  return 'Hello, ' + this.name;
}
]]></code>
  </synonym>
  <synonym id="syn-constructor-with-parameter">
    <title>Constructor with parameter</title>
    <code language="javascript"><![CDATA[
function Person(name) {
  this.name = name;
};
]]></code>
  </synonym>
  <synonym id="syn-instantiate">
    <title>Instantiate</title>
    <code language="javascript"><![CDATA[
var person = new Person();
]]></code>
  </synonym>
  <synonym id="syn-reflection">
    <title>Reflection</title>
    <code language="javascript"><![CDATA[
var name = 'Bob';
typeof name // == 'String'
]]></code>
  </synonym>
  <synonym id="syn-check-the-type">
    <title>Check the type</title>
    <code language="javascript"><![CDATA[
var name = 'Bob';

// Because of javascript's type system we
// need to check both instanceof and typeof
name instanceof String || typeof name === 'string'; 
// == true

(!(name instanceof Number || typeof name === 'number'));
// == true
]]></code>
  </synonym>
  <synonym id="syn-subclass">
    <title>Subclass</title>
    <code language="javascript"><![CDATA[
function Person(name) {
  this.name = name;
}

Person.prototype.greet = function() {
  return 'Hello, ' + this.name;
}
    
function Employee(name, salary) {   
  Person.call(this, name);
  this.salary = salary;
}

Employee.prototype = new Person();
Employee.prototype.constructor = Employee;

Employee.prototype.grantRaise = function(percent) {
  percent /= 100;
  this.salary += (this.salary * percent).toInt();
}
]]></code>
  </synonym>
  <synonym id="syn-operator-overloading">
    <title>Operator &quot;overloading&quot;</title>
    <code language="javascript"><![CDATA[
// not supported
]]></code>
  </synonym>
</theme>
<theme id="theme-finding-elements-in-dom">
  <title>Finding elements in DOM</title>
  <synonym id="syn-find-one-element-by-id">
    <title>Find one element by id</title>
    <code language="javascript"><![CDATA[
document.getElementById('main');

document.querySelector('#main');
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-class">
    <title>Find one element by class</title>
    <code language="javascript"><![CDATA[
document.getElementsByClassName('visible')[0];

document.querySelector('.visible');
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-class">
    <title>Find many elements by class</title>
    <code language="javascript"><![CDATA[
document.getElementsByClassName('visible');

document.querySelectorAll('.visible');
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-tag">
    <title>Find one element by tag</title>
    <code language="javascript"><![CDATA[
document.getElementsByTagName('div')[0];

document.querySelector('div');
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-tag">
    <title>Find many elements by tag</title>
    <code language="javascript"><![CDATA[
document.getElementsByTagName('div');

document.querySelectorAll('div');
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-name">
    <title>Find one element by name</title>
    <code language="javascript"><![CDATA[
document.getElementsByName('form')[0];

document.querySelector('[name="form"]');
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-name">
    <title>Find many elements by name</title>
    <code language="javascript"><![CDATA[
document.getElementsByName('form');

document.querySelectorAll('[name="form"]');
]]></code>
  </synonym>
  <synonym id="syn-find-elements-by-combination-of-above">
    <title>Find elements by combination of above</title>
    <code language="javascript"><![CDATA[
document.getElementById('main').getElementsByTagName('div')[0].getElementsByClassName('visible');

document.querySelectorAll('#main div:first-of-type .visible');
]]></code>
  </synonym>
  <synonym id="syn-iterate-over-a-list-of-elements">
    <title>Iterate over a list of elements</title>
    <code language="javascript"><![CDATA[
for (var i = 0, el; el = els[i]; i++) {
  doSomethingWithEl(el);
}
]]></code>
  </synonym>
  <synonym id="syn-access-the-first-child">
    <title>Access the first child</title>
    <code language="javascript"><![CDATA[
elem.firstChild();
]]></code>
  </synonym>
  <synonym id="syn-find-out-whether-an-element-has-children-elements">
    <title>Find out whether an element has children elements</title>
    <code language="javascript"><![CDATA[
elem.hasChildNodes();
]]></code>
  </synonym>
</theme>
<theme id="theme-manipulating-dom">
  <title>Manipulating DOM</title>
  <synonym id="syn-create-an-element">
    <title>Create an element</title>
    <code language="javascript"><![CDATA[
var element = document.createElement('div');
]]></code>
  </synonym>
  <synonym id="syn-create-an-element-and-set-its-contents">
    <title>Create an element and set its contents</title>
    <code language="javascript"><![CDATA[
var element = document.createElement('p');

element.innerHTML = 'A quick brown <em>fox</em>.';
]]></code>
  </synonym>
  <synonym id="syn-add-an-element-to-a-parent">
    <title>Add an element to a parent</title>
    <code language="javascript"><![CDATA[
element.appendChild(newElement);
]]></code>
  </synonym>
  <synonym id="syn-remove-an-element-from-its-parent">
    <title>Remove an element from its parent</title>
    <code language="javascript"><![CDATA[
element.parentNode.removeChild(element);
]]></code>
  </synonym>
</theme>
<theme id="theme-regular-expressions">
  <title>Regular expressions</title>
  <synonym>
    <code language="javascript"><![CDATA[
var email = 'test@example.com';
email.match(/@/);
// == ['@']
]]></code>
  </synonym>
  <synonym>
    <code language="javascript"><![CDATA[
var invalidEmail = 'f@il@example.com';
invalidEmail.match(/@/g)
// == ['@', '@']
]]></code>
  </synonym>
</theme>
<theme id="theme-exceptions">
  <title>Exceptions</title>
  <synonym id="syn-throw-an-exception">
    <title>Throw an exception</title>
    <code language="javascript"><![CDATA[
throw new Error("Intruder Alert!!");

// or...

throw "Intruder Alert!!";
]]></code>
  </synonym>
  <synonym id="syn-catch-an-exception">
    <title>Catch an exception</title>
    <code language="javascript"><![CDATA[
try {
  undefinedFunction();
} catch(e) {
  if (e instanceof ReferenceError) {
    console.log('You called a function that does not exist');
  }
} finally {
  console.log('This runs even if an exception is thrown');
}
]]></code>
  </synonym>
</theme>
<theme id="theme-event-handling">
  <title>Event handling</title>
  <synonym id="syn-attach-an-event-handler">
    <title>Attach an event handler</title>
    <code language="javascript"><![CDATA[
element.addEventListener('click', handleOnClick, false);
]]></code>
  </synonym>
  <synonym id="syn-remove-an-event-handler">
    <title>Remove an event handler</title>
    <code language="javascript"><![CDATA[
element.removeEventListener('click', handleOnClick, false);
]]></code>
  </synonym>
</theme>
<theme id="theme-timing">
  <title>Timing</title>
  <synonym id="syn-schedule-a-future-event">
    <title>Schedule a future event</title>
    <code language="javascript"><![CDATA[
setTimeout(function() { … }, 500);
]]></code>
  </synonym>
  <synonym id="syn-measure-the-execution-time-of-a-function">
    <title>Measure the execution time of a function</title>
    <code language="javascript"><![CDATA[
function measure(fn) {
  var start = Date.now();
  fn();
  return Date.now() - start;
}
]]></code>
  </synonym>
</theme>
<theme id="theme-html-attributes">
  <title>HTML attributes</title>
  <synonym id="syn-get-html-attribute">
    <title>Get HTML attribute</title>
    <code language="javascript"><![CDATA[
element.getAttribute('href');
]]></code>
  </synonym>
  <synonym id="syn-set-html-attribute">
    <title>Set HTML attribute</title>
    <code language="javascript"><![CDATA[
element.setAttribute('playable', true);
]]></code>
  </synonym>
  <synonym id="syn-remove-html-attribute">
    <title>Remove HTML attribute</title>
    <code language="javascript"><![CDATA[
element.removeAttribute('playable');
]]></code>
  </synonym>
  <synonym id="syn-check-if-html-attribute-exists">
    <title>Check if HTML attribute exists</title>
    <code language="javascript"><![CDATA[
element.hasAttribute('href');
]]></code>
  </synonym>
</theme>
<theme id="theme-css-classes">
  <title>CSS classes</title>
  <synonym id="syn-add-css-class">
    <title>Add CSS class</title>
    <code language="javascript"><![CDATA[
element.className += ' new-class';

element.classList.add('new-class');
]]></code>
  </synonym>
  <synonym id="syn-remove-css-class">
    <title>Remove CSS class</title>
    <code language="javascript"><![CDATA[
element.className = element.className.replace(/ new-class/, '');

element.classList.remove('new-class');
]]></code>
  </synonym>
</theme>
<theme id="theme-ajax">
  <title>Ajax</title>
  <synonym id="syn-request-data-via-xmlhttprequest">
    <title>Request data via XMLHttpRequest</title>
    <code language="javascript"><![CDATA[
var client = new XMLHttpRequest;
  
client.onreadystatechange = function() {  
  if (this.readyState == 4) {  
    processData(this);
  }
}
client.open('GET', 'data.json');
client.send();

function processData(request) {
  console.log('The contents of your data: ' + request.responseText);
}
]]></code>
  </synonym>
</theme>
<theme id="theme-jquery">
  <title>jQuery</title>
  <synonym id="syn-react-to-document-finishing-loading">
    <title>React to document finishing loading</title>
    <code language="javascript"><![CDATA[
$(document).ready(function(){
  console.log('Content is loaded');
});
]]></code>
  </synonym>
  <synonym id="syn-node-lookup">
    <title>Node lookup</title>
    <code language="javascript"><![CDATA[
var els = jQuery('div');
]]></code>
  </synonym>
  <synonym id="syn-node-creation">
    <title>Node creation</title>
    <code language="javascript"><![CDATA[
var pic = $('<img/>');

pic.addClass('avatar');
pic.toggleClass('main');

pic.attr('src', 'myPic.jpg');

$('body').append(pic);
]]></code>
  </synonym>
  <synonym id="syn-event-handling">
    <title>Event handling</title>
    <code language="javascript"><![CDATA[
$('a.person').click(function(e){
  console.log('Person clicked');
})
]]></code>
  </synonym>
  <synonym id="syn-relative-nodes">
    <title>Relative nodes</title>
    <code language="javascript"><![CDATA[
var myNode = $('div:first');

var parent = myNode.parent();

var next = myNode.next();
]]></code>
  </synonym>
  <synonym id="syn-children">
    <title>Children</title>
    <code language="javascript"><![CDATA[
var myNode = $('div:first');

// If there are children, remove them
if (!myNode.is(':empty')) {
  myNode.empty();
}

]]></code>
  </synonym>
  <synonym id="syn-clone">
    <title>Clone</title>
    <code language="javascript"><![CDATA[
var clonedElement = $('#about').clone();
]]></code>
  </synonym>
</theme>
<theme id="theme-math">
  <title>Math</title>
  <synonym id="syn-absolute-value">
    <title>Absolute value</title>
    <code language="javascript"><![CDATA[
Math.abs(-4) // == 4
]]></code>
  </synonym>
  <synonym id="syn-ceiling">
    <title>Ceiling</title>
    <code language="javascript"><![CDATA[
Math.ceil(4.89) // == 5
]]></code>
  </synonym>
  <synonym id="syn-floor">
    <title>Floor</title>
    <code language="javascript"><![CDATA[
Math.floor(4.89) // == 4
]]></code>
  </synonym>
  <synonym id="syn-random">
    <title>Random</title>
    <code language="javascript"><![CDATA[
// Returns a random float greater than or equal to 0.0
// and less than 1.0

Math.random()
]]></code>
  </synonym>
  <synonym id="syn-sine-and-cosine">
    <title>Sine and Cosine</title>
    <code language="javascript"><![CDATA[
Math.sin(Math.PI/2) // == 1
Math.cos(Math.PI) // == -1
]]></code>
  </synonym>
  <synonym id="syn-convert-a-string-to-a-number">
    <title>Convert a String to a number</title>
    <code language="javascript"><![CDATA[
parseInt('3') // == 3

parseFloat('3.14') // == 3.14

parseInt('3px') // == 3
parseInt('three') // NaN
]]></code>
  </synonym>
</theme>
<theme id="theme-run-time-program-manipulation">
  <title>Run time program manipulation</title>
  <synonym id="syn-eval">
    <title>Eval</title>
    <code language="javascript"><![CDATA[
eval('alert("hello from eval")');
]]></code>
  </synonym>
  <synonym id="syn-adding-a-method-to-a-class">
    <title>Adding a method to a class</title>
    <code language="javascript"><![CDATA[
String.prototype.startsWith = function(beginning) {
  var head = this.substr(0, beginning.length);
  return head == beginning;
}
]]></code>
  </synonym>
</theme>
</synonyms>
